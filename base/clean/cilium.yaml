---
# Source: cilium/templates/cilium-agent-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay-client-tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lSQUtaSFd5NWhUT2pjZmJBU3lnSVpFUzR3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGFIVmlZbXhsTFdOaExtTnBiR2wxYlM1cGJ6QWVGdzB5TVRFd01ESXdNelV3TURkYQpGdzB5TkRFd01ERXdNelV3TURkYU1CNHhIREFhQmdOVkJBTVRFMmgxWW1Kc1pTMWpZUzVqYVd4cGRXMHVhVzh3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURRamRzTTF2V3hSaG0xMitvdk1CRDQKc0N5d2Z6NW9rYnJxQ0UyNTV0UUpWZlVwMzhiL3o5Q1ZocUtqcFNZL3ZpdDV4SHlLWmpRQ09qQmJudzJ5K2JkdApqbGRsZ0kwREUzeTl1YXFJdmdLTlZBTjlQa3N3RXE3dHdQQ0JSM3J4OUdnNUtwSndzRVVpSEpzY1NtbUZmNisxCnBmQ09IMXN3SkJLMjJDU1JjOG5UTnBPanJPeVVMZHd0MC81aks1cnZIRUUxeU1WSnMrai8vdGpwL1JTOElQUTgKVWgvbm5JeGszOEpmaCtnUGtlNnJTRkc4Y0VhS1pnanBGN0p6cGh0QXRZOCszbzcrZFJhT0NBUHR2bExZTGt0SwpBdUhqcmxyN2lxSTNEWTZoSldVYkYzYUZJd2s3VUozZkxCSDl2QVBvbmFFQlVYTlFXYU1KYjhrYTBEZzN0c014CkFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVSTcyWGJEV2l6YzVsUlJYUwo0c0dSQTZnbVc0OHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBR3hFOG9sSUdkbHg2bHRRNjh2aUExd3lJNFJFCjJhLzRiK0poL1p5S0tJWmYzSWw3Q3MrNHJ2UTNabGRmd1dRRUhROVlRWmNIWVdkZ0hlSlNpVldqTm5pekNZdkkKeVFyaFBJdEFqdjVMb3hUdUJaSDcyMEhZbTV6eGNVci9wcFVjWHlqVE56clNTdzRlNnhmMDZQZk8vbXVqY2lMYgpObzNpdjkvVng1OWgzVEc5OGpGdDZCckU5NEt6T2tBcTN1b0luaHNiR3p6TUF3OStyT2xHaEZpa00rSWJyRHExCmxYWTA0WnloY2lpMm5QR1ZVWGJ6bGp1eVMxU29DcmMxa0tqdFV6eXJuTW9HYnZJT3B1aEZWUjljK3huQ0dKc0gKbG9oc1VRYWVFWnpCalMwczF6MFlYYngzZDVJL0g4cXY2SjU0VnVrWk9yR1BWbnFud2ZPcFFlTWJMNmc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUlBTzFrS1draks0dEhiM3d5dlpSdjR3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGFIVmlZbXhsTFdOaExtTnBiR2wxYlM1cGJ6QWVGdzB5TVRFd01ESXdNelV3TURoYQpGdzB5TkRFd01ERXdNelV3TURoYU1DTXhJVEFmQmdOVkJBTU1HQ291YUhWaVlteGxMWEpsYkdGNUxtTnBiR2wxCmJTNXBiekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLZFdmSWo4U1pQZk01eU0Kc1Y1RUVzdXErNjBON01ra044ZDdFU29SZW1YK0VpSW03bnBGUTNrYW92VHk3c1VuU3ZPSXVtMlplVTZzMDN4eQo0Rmg4aFNuTlh5UXVLUnBZNDczUlRnRDRWUmMvN0RJdGkxbjY3dFNpY0NydmEySlRhRlRVV0VTWmdlUEJaNU5pCndtR3N6cE5EbDRyUHc4RVlVZDBDZngwRjRwdTZrdG1MYUpMUGxlY2pUd0E3U0xmZFZ3aHRBV2dPb3YwWXd5bXcKNzZhSURVaG1kSVZZU29rQUtrWkRNMDlYUHM3SmZrYWhrZXNwdFlJQjN6aWh1dDUvUThCa0R1d1pvNC92aEFyVQpjaUZPNU8zWnZlTUFscEVJdEVOaVhVcGo1ZDZHS1hGUTZsamIvdWdpcGViZGxobGdvV2xpWlkzVmJUMFdGLzNsCnJFVXhVVE1DQXdFQUFhT0JoakNCZ3pBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUIKQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVJNzJYYkRXaQp6YzVsUlJYUzRzR1JBNmdtVzQ4d0l3WURWUjBSQkJ3d0dvSVlLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0CkxtbHZNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUN3Mjk0MUN6Sk9FUVlJUmNieVlwR1BEdkJ5NE5SdWtxN0QKWDZlbUFZcEpVOHBBQzZuUzkyaWJtemMyNUlaU1hCbVMveWU5UHV6MHE1S09tUHlvK0dtc0hPMng1Y0ZWMzVHNwpsOWFCUlh0RC9mK0ZOYXZqWElBT243Q215SHRDQjhNS0xZNHlLcEhnU1gvSkxQNUdUYitNeDRYSWRNdXYyb2pSCkkwTmI3MEh0amxSM29ESEVIempRY2Y3dFVoRXZQdXh2d0cxb0FCNTJGSS9aejFvK1IwQWJFdGFrbWlkTHlObU4KTW1RUlhrK2ZYTU8wMXJ0SCt0MHZLTk5YWG9jWmoxd1BRMjBKQXlFZ00yNXlBMk0rUzE3d2V2TnE1WXdPWUxzeQpydUFFYWhGZVVHS0VzR3R4TkNQcDdRT3FBZkU1NmJ3L0w2TUNrRHNYZWFKbTJOUnJtSGh5Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcDFaOGlQeEprOTh6bkl5eFhrUVN5NnI3clEzc3lTUTN4M3NSS2hGNlpmNFNJaWJ1CmVrVkRlUnFpOVBMdXhTZEs4NGk2YlpsNVRxelRmSExnV0h5RktjMWZKQzRwR2xqanZkRk9BUGhWRnovc01pMkwKV2ZydTFLSndLdTlyWWxOb1ZOUllSSm1CNDhGbmsyTENZYXpPazBPWGlzL0R3UmhSM1FKL0hRWGltN3FTMll0bwprcytWNXlOUEFEdEl0OTFYQ0cwQmFBNmkvUmpES2JEdnBvZ05TR1owaFZoS2lRQXFSa016VDFjK3pzbCtScUdSCjZ5bTFnZ0hmT0tHNjNuOUR3R1FPN0JtamorK0VDdFJ5SVU3azdkbTk0d0NXa1FpMFEySmRTbVBsM29ZcGNWRHEKV052KzZDS2w1dDJXR1dDaGFXSmxqZFZ0UFJZWC9lV3NSVEZSTXdJREFRQUJBb0lCQUJJSmFITDdmcExKeEM1agptOXFsUzhGWU5MaDZmOE5PZkJTc1Z6VkpuUC9SV3ZNRGIwRU9waTh2aDlFUFBsMVIxdXBaR244bHc4V1BLMXlHCnBWZmtWQllsWk5QcGhkU3BNQ01OcEhMR1VhV241aldpWXhyWHlWWnlDOVVVNldZM3gwOGRkRVl3cGFkKytVTVIKcWhJTkpsY0pPaFJrUUoxWG1idFF3WkxIUjUyeFdkNzkxUkhVUXpmd1pRSG5IYmN3RmNiaWh0ekF2QUxZWjRHUQpwdzR1bVVuSDJBaDFUL3Q0SFJ3TXZEYUFaOWltWmNJemR0NEorQ0pXSk9IYXgrTkt5Z2hXMXRlNkRXWGtnWGFICmlUQllGVlo5Vm4vTC9zWFNrWHZxU1B2Z3MzTVd0TUZaM3UwdWtaTUdBMWNnSndVQzdxS2Y0TUFYUTdHTWlKVDQKMTIyZHhjRUNnWUVBM0FoSjRaT0FmWWhCNXVTQWd4bDlZZnlRR2Z4UmVwRVkzYWZXZWM1NkdkM2FJWTJoNHhrRwpmQ2JlUXVLemRxeHgraWtiYm5iYytCWmJad1RIa3Nwak11U2JmSk1WYW51THpNSHNYZHFZQkVWQjJVUlhBL1JyClFoa3ZCWHVtVGdUQ2dTL3dGNzE5ejc1ckR3MUxMcHY5TEswLzRCTmx3elJyRGNxTklwN21JZjhDZ1lFQXdyRVYKNUYweDY1SVF4ai9SK3J4US9jZ0NyT0lLaWY3VVVyeHBYbWNTQjJnd0VFWmdrbEU5Z0NvTjlCTjNlOWpFQVF5cQpETWszV2h5UWRzREVEemNYMEdIOE5RdVRRaEcyRTZqVmlOUW1Tb2dHZGtPSmNYNjBYL1J0dXJ5MFZ3K2NoZ3JzClE3WFhhb244WEJtRWppYnI0R0pRTk9HbHZnSklHWU1Gd0RYbjZNMENnWUE5bkhpTG1KRGZGYnRXV3Q5OVZqTGMKc0NydGk5Q0k0SDQwK3QwOGlFdDZXTHZPcjJrSVBTYXF0dnQvZ1JrOWZyWC9sV2tmK2xxUGdUc2cwcDdMaEs1WQpQdGttL2N4K1g0L2F5dVpUdFhUaHBUNzJCb1BURUtyRC9HZEZRc1ZqalVPbGh2WFV2L090cXlVeE5zaTVpV1pRCkQwY1dpSGZ6UEFkSitsQ2d4QnV1b3dLQmdFQ09mYWJhYkNvanBlSkcyVGFkNlBFdHVBMWhhb00xZDJ2enc3Q2sKMXFxVUZwUGU4aml5TFlWbzdIV0pXdTQ3QTBzaHl1VXdkMlV1NFl3dkFSUFdmZFFBR2FQeE1hUVB3V01sY2FETQpUK0lZMXFPeVkwbTU3TStBZWo0WVFtZzM2ZnZjZFZsQ1c2cWRGSXZwZmpXd25EZ3NBVkozbkFDME92b1NvdjZJCklWemxBb0dBWTVaU3BWbEdTdEJCMy9TNkExeDFQcUJOK001WEh4blhWYytHdWZ2aDE5aGl2Zmw1d1Z5WERsRWcKazRLNXdUaWsyVkNsZ3BZNUljMnUvWjMyMlY0QXVtMlBmVmk2Q0dpaGJ1djVEMmZIZndzT3R2ZThDSjQxWGx6Zgp0eFpHYjhkRXlLRVpXTWZsVzljRk56cTU0NitsdHREdmtxRUdVaUtVSWVuTUg3ZGUwTHM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble-server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lSQUtaSFd5NWhUT2pjZmJBU3lnSVpFUzR3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGFIVmlZbXhsTFdOaExtTnBiR2wxYlM1cGJ6QWVGdzB5TVRFd01ESXdNelV3TURkYQpGdzB5TkRFd01ERXdNelV3TURkYU1CNHhIREFhQmdOVkJBTVRFMmgxWW1Kc1pTMWpZUzVqYVd4cGRXMHVhVzh3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURRamRzTTF2V3hSaG0xMitvdk1CRDQKc0N5d2Z6NW9rYnJxQ0UyNTV0UUpWZlVwMzhiL3o5Q1ZocUtqcFNZL3ZpdDV4SHlLWmpRQ09qQmJudzJ5K2JkdApqbGRsZ0kwREUzeTl1YXFJdmdLTlZBTjlQa3N3RXE3dHdQQ0JSM3J4OUdnNUtwSndzRVVpSEpzY1NtbUZmNisxCnBmQ09IMXN3SkJLMjJDU1JjOG5UTnBPanJPeVVMZHd0MC81aks1cnZIRUUxeU1WSnMrai8vdGpwL1JTOElQUTgKVWgvbm5JeGszOEpmaCtnUGtlNnJTRkc4Y0VhS1pnanBGN0p6cGh0QXRZOCszbzcrZFJhT0NBUHR2bExZTGt0SwpBdUhqcmxyN2lxSTNEWTZoSldVYkYzYUZJd2s3VUozZkxCSDl2QVBvbmFFQlVYTlFXYU1KYjhrYTBEZzN0c014CkFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVSTcyWGJEV2l6YzVsUlJYUwo0c0dSQTZnbVc0OHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBR3hFOG9sSUdkbHg2bHRRNjh2aUExd3lJNFJFCjJhLzRiK0poL1p5S0tJWmYzSWw3Q3MrNHJ2UTNabGRmd1dRRUhROVlRWmNIWVdkZ0hlSlNpVldqTm5pekNZdkkKeVFyaFBJdEFqdjVMb3hUdUJaSDcyMEhZbTV6eGNVci9wcFVjWHlqVE56clNTdzRlNnhmMDZQZk8vbXVqY2lMYgpObzNpdjkvVng1OWgzVEc5OGpGdDZCckU5NEt6T2tBcTN1b0luaHNiR3p6TUF3OStyT2xHaEZpa00rSWJyRHExCmxYWTA0WnloY2lpMm5QR1ZVWGJ6bGp1eVMxU29DcmMxa0tqdFV6eXJuTW9HYnZJT3B1aEZWUjljK3huQ0dKc0gKbG9oc1VRYWVFWnpCalMwczF6MFlYYngzZDVJL0g4cXY2SjU0VnVrWk9yR1BWbnFud2ZPcFFlTWJMNmc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZVENDQWttZ0F3SUJBZ0lSQUk3SGRpUlVRd2VRZGZCSXpiVk52dEF3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGFIVmlZbXhsTFdOaExtTnBiR2wxYlM1cGJ6QWVGdzB5TVRFd01ESXdNelV3TURoYQpGdzB5TkRFd01ERXdNelV3TURoYU1Db3hLREFtQmdOVkJBTU1IeW91WkdWbVlYVnNkQzVvZFdKaWJHVXRaM0p3Cll5NWphV3hwZFcwdWFXOHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEVTVuWWgKNVBockxQc3A1L2IrVHBOWStaczM2b2hmbmJPSjA1VkRMaXNhMWpSSXlJVGlsUWFFSmhaMVJFbjR1QTZPTGJCMwpQcW53Uko2dnNNVkg3a3FtTjR6ZkNrUDlpZzRsN0lvUno4WU5rek9JRmJrdEJrSnBzMk5rL0krN2txREpudHJoCkdjYS9BdlRkRTNsTnhEbjVpMjFKbUY0UElOa3Q0RXQvSjY5Tng4Nm5IRzcyWmFFNXlPdGp1bEdwbFRNeE5QMHEKQ2U4T1V4NVVZRjdEVFdtaGdjcWFOSEZkSUlleE1ZOEVtVE5USE5xOHZyRHd2djZPRlFOd0cxWDFjdGU0UDVkegpHK05lTnNyYyt0eHFHQ29oKy8ybmNSZ3djOHFDUjV1VjVaZmdNK3ZkYjhlcWltT2p6L2lTWTNGK2dJNlZOa1VxCmNKY0lWMG5lUTBVYXhpNFJBZ01CQUFHamdZMHdnWW93RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVcKTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQQpGQ085bDJ3MW9zM09aVVVWMHVMQmtRT29KbHVQTUNvR0ExVWRFUVFqTUNHQ0h5b3VaR1ZtWVhWc2RDNW9kV0ppCmJHVXRaM0p3WXk1amFXeHBkVzB1YVc4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFNnVZbUtlLytwU1NLOFIKdjlGVjBPVEpCbHJPYmt0b25mTU10Z29OckhlclNQU0d2SlA5MWVzdElKMVhEVGRkaUJKL0hYVkpaR0YrMjFEQwpORWxFdldldXNmZDh6ajB1cS8zUUNnNlhleEM0U2t0Um1iZEk2WDdPM1hWbkNIcUxJSTJ3QzFwbkRrYWZOSkNwCmZzUms4Si90VlREcmExR3pqZ3FTVHJ5M3VxbU1qSi9LMDJOclN4SVVEbVdId0Q3YlNibks4WUdpYXNZUjhGQ2oKM3RVcGFKQWVUL0xsNGx4S2dJelIzWFJ5ZDQ3OVBLaU5xWVZ2SHgxWVZkRnRsV3pLUk1qNVRBbC90SDM4eGpuOApYL3RRMEJZWWpjZEtKOEdIengxU1R0bHVzaHd4a1VPME9Eby94UXpMNkNCZzhDR21nMlJYa1VCNXFoMldBdEtICjBvZU9URTQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMU9aMkllVDRheXo3S2VmMi9rNlRXUG1iTitxSVg1MnppZE9WUXk0ckd0WTBTTWlFCjRwVUdoQ1lXZFVSSitMZ09qaTJ3ZHo2cDhFU2VyN0RGUis1S3BqZU0zd3BEL1lvT0pleUtFYy9HRFpNemlCVzUKTFFaQ2FiTmpaUHlQdTVLZ3laN2E0Um5HdndMMDNSTjVUY1E1K1l0dFNaaGVEeURaTGVCTGZ5ZXZUY2ZPcHh4dQo5bVdoT2Nqclk3cFJxWlV6TVRUOUtnbnZEbE1lVkdCZXcwMXBvWUhLbWpSeFhTQ0hzVEdQQkprelV4emF2TDZ3CjhMNytqaFVEY0J0VjlYTFh1RCtYY3h2alhqYkszUHJjYWhncUlmdjlwM0VZTUhQS2drZWJsZVdYNERQcjNXL0gKcW9wam84LzRrbU54Zm9DT2xUWkZLbkNYQ0ZkSjNrTkZHc1l1RVFJREFRQUJBb0lCQUdYUnZtZWhhUWxnM3RJQQo1VWhrYmVYY29sWlFyVjRGUHV0SXJKY1Bpbi93TjlzalF5SldJV0tzRUl1TzJFM0NRUHZRY0JmbmVVQzJvS25uCndjSVAvZFdXdGFHcCtEQldpVU9yNTdCekRRWkxBeGN2Ukh0N0JlSWxjQURKSlRpUS9LTFFmVit3Z3pPeEIwaC8KMnNETmV1aVV2UFM0a1N0dEMxRDhkejdkek9KR01HVGdwVjRObDZQWGJSZy9tYldUSWJYRkg4TFlyT3FCM3ZBMQo4V1pQeElEa3J4VzN6dHhhaGtqbEJEa1VKcUZBWWdWRjFBOVd0RWZtL1dMdWZoSEMzVGJJTUZWbENGSGFjOXRhCkI4WDQvdlhjeVdHSWdsTmlXdmRsemM2Q1RpclZkSktxSnBTUkJLajFaZy9kSVRLTE5xTnp3Z0pPZU90blQwNmwKeEZJdE9CRUNnWUVBOGdSa3pjR3g5MkRPRFlPU0o1SkxiRUkzZWxzTWwvZXVkWlRhMzRZWkZuOUUzQWpoWHlpWgo3WEp3bzZ4MXIyUG4zVUJjS2hJMkpWdkpuWTZjZEhMSE9tY0FoT3MrM01BMzE1NmFqUDhGUVd5Z042QjRhbUJ4CklQbkNSLytWeHdsd1o3T2pZT0h0ZklWU3B3NnVBNXlsNXFveU9rbTc0Y2w0YjMxMmxnM3NYcFVDZ1lFQTRUTm8KWERsWFpVS0o1bDFRSE9wQXVaYWVBSFhvd0Zvb3VpVUgwTlVPaU1wREk3aEFxaUdRdisrRUx2S1A3NHBjUWhzQQpzUVY0elZEUW9wdTRVd1BKS2xvUWJ4VU9LQ2VYT1F2ZVBSczBNV0sralRmamZDVkt1Ukg4SmdBdU5WZGI1Y2hWCjZ6L2xyTk9UTVByODloMGw4YmxhWFBJNjFnUHdVV1BTTERoMlBvMENnWUFkdWpCdm5hVXdqN0YvczNPV2JML2EKOGw5Q0prRHJ3YjZxTHJpYjBDcnd1bjFJMGNadEc5MmNidndxL3BvT0N5V0Y1Y3ZzVndSVG5teXJiOE1FQXIwNgpEVURoRXN4TDdVaHVzY3FtR3dVWVBqR0g0NndtMU9YUWVSMUdIcnpWRC9IQXF5NGNUbVFQY1lqdmdEd2JzWGduClZ5eUlRRnBWcDV1bGhqRzB5TTBKNlFLQmdRQzk2UjlSM3AxZjdFdmtjNzZTazgxL2RJL0w3YU1aU3k3YlEwMGoKQS9rY3pBendlM28wdnRlVnRNT3czNmNZSjRNRDBFZTJBTnBOc3FBdThNanhZTmp0R1VTUW1KMzJxT1J6SEJvUApSL2lzeVF2T2hWb1dvRkF5WUFOV2ZJSjdReTloU0orRUlyOXFEb1lySVEzZjh0YkQwVDV0OFd4Q2ZOSFZvU3RsClZUd0tKUUtCZ1FEb29MdnJvQWZYTFFEUXBEa0lSOXZQdG1EWVRSMU8zUlUrNExJaWFjOTdPTVFXWDBjVWMwY3UKemRVQktDN29pdXZ1L3piTFV0Y0djYjJ6bDl0cmxPRHpKanZ4Tk9WcEFqMGRXV1lWdzVtT2JVWFo5UTBEWjFUZwoxNlJ5ZTduVkNTZGg4aXdtY25WbU5mME5xQ2hKeXhRbUc3bnpvY1VqMTNaeDJqMGFRQkg5TXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in a kvstore, etcd or consul, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  cilium-endpoint-gc-interval: "5m0s"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes
  enable-policy: "default"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "true"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: 5s

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass
  # optimization for nodeport reverse NAT handling.
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: default
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: ""

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  tunnel: vxlan
  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv6-masquerade: "true"
  enable-bpf-masquerade: "true"

  enable-xt-socket-fallback: "true"
  install-iptables-rules: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-bandwidth-manager: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement:  "disabled"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-session-affinity: "true"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path:  "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  cluster-pool-ipv4-cidr: "10.0.0.0/8"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cgroup-root: "/run/cilium/cgroupv2"
---
# Source: cilium/templates/hubble-ca-configmap.yaml
# NOTE: the hubble-ca-cert ConfigMap is deprecated and will be removed in v1.11
# The Hubble CA certificate can be found in both the hubble-server-certs and
# hubble-relay-client-certs Secrets under the ca.crt key.
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ca-cert
  namespace: kube-system
data:
  ca.crt: |-
    -----BEGIN CERTIFICATE-----
    MIIDKDCCAhCgAwIBAgIRAKZHWy5hTOjcfbASygIZES4wDQYJKoZIhvcNAQELBQAw
    HjEcMBoGA1UEAxMTaHViYmxlLWNhLmNpbGl1bS5pbzAeFw0yMTEwMDIwMzUwMDda
    Fw0yNDEwMDEwMzUwMDdaMB4xHDAaBgNVBAMTE2h1YmJsZS1jYS5jaWxpdW0uaW8w
    ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQjdsM1vWxRhm12+ovMBD4
    sCywfz5okbrqCE255tQJVfUp38b/z9CVhqKjpSY/vit5xHyKZjQCOjBbnw2y+bdt
    jldlgI0DE3y9uaqIvgKNVAN9PkswEq7twPCBR3rx9Gg5KpJwsEUiHJscSmmFf6+1
    pfCOH1swJBK22CSRc8nTNpOjrOyULdwt0/5jK5rvHEE1yMVJs+j//tjp/RS8IPQ8
    Uh/nnIxk38Jfh+gPke6rSFG8cEaKZgjpF7JzphtAtY8+3o7+dRaOCAPtvlLYLktK
    AuHjrlr7iqI3DY6hJWUbF3aFIwk7UJ3fLBH9vAPonaEBUXNQWaMJb8ka0Dg3tsMx
    AgMBAAGjYTBfMA4GA1UdDwEB/wQEAwICpDAdBgNVHSUEFjAUBggrBgEFBQcDAQYI
    KwYBBQUHAwIwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUI72XbDWizc5lRRXS
    4sGRA6gmW48wDQYJKoZIhvcNAQELBQADggEBAGxE8olIGdlx6ltQ68viA1wyI4RE
    2a/4b+Jh/ZyKKIZf3Il7Cs+4rvQ3ZldfwWQEHQ9YQZcHYWdgHeJSiVWjNnizCYvI
    yQrhPItAjv5LoxTuBZH720HYm5zxcUr/ppUcXyjTNzrSSw4e6xf06PfO/mujciLb
    No3iv9/Vx59h3TG98jFt6BrE94KzOkAq3uoInhsbGzzMAw9+rOlGhFikM+IbrDq1
    lXY04Zyhcii2nPGVUXbzljuyS1SoCrc1kKjtUzyrnMoGbvIOpuhFVR9c+xnCGJsH
    lohsUQaeEZzBjS0s1z0YXbx3d5I/H8qv6J54VukZOrGPVnqnwfOpQeMbL6g=
    -----END CERTIFICATE-----
---
# Source: cilium/templates/hubble-relay-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    peer-service: unix:///var/run/cilium/hubble.sock
    listen-address: :4245
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-envoy
  namespace: kube-system
data:
  envoy.yaml: |
    static_resources:
      listeners:
        - name: listener_hubble_ui
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8081
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: auto
                    stat_prefix: ingress_http
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: local_service
                          domains: ["*"]
                          routes:
                            - match:
                                prefix: "/api/"
                              route:
                                cluster: backend
                                prefix_rewrite: "/"
                                timeout: 0s
                                max_stream_duration:
                                  grpc_timeout_header_max: 0s
                            - match:
                                prefix: "/"
                              route:
                                cluster: frontend
                          cors:
                            allow_origin_string_match:
                              - prefix: "*"
                            allow_methods: GET, PUT, DELETE, POST, OPTIONS
                            allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                            max_age: "1728000"
                            expose_headers: grpc-status,grpc-message
                    http_filters:
                      - name: envoy.filters.http.grpc_web
                      - name: envoy.filters.http.cors
                      - name: envoy.filters.http.router
      clusters:
        - name: frontend
          connect_timeout: 0.25s
          type: strict_dns
          lb_policy: round_robin
          load_assignment:
            cluster_name: frontend
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 8080
        - name: backend
          connect_timeout: 0.25s
          type: logical_dns
          lb_policy: round_robin
          http2_protocol_options: {}
          load_assignment:
            cluster_name: backend
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 8090
---
# Source: cilium/templates/cilium-agent-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - nodes
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  # Deprecated for removal in v1.10
  - create
  - list
  - watch
  - update

  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumnetworkpolicies/status
  - ciliumnetworkpolicies/finalizers
  - ciliumclusterwidenetworkpolicies
  - ciliumclusterwidenetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/finalizers
  - ciliumendpoints
  - ciliumendpoints/status
  - ciliumendpoints/finalizers
  - ciliumnodes
  - ciliumnodes/status
  - ciliumnodes/finalizers
  - ciliumidentities
  - ciliumidentities/finalizers
  - ciliumlocalredirectpolicies
  - ciliumlocalredirectpolicies/status
  - ciliumlocalredirectpolicies/finalizers
  - ciliumegressnatpolicies
  verbs:
  - '*'
---
# Source: cilium/templates/cilium-operator-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
rules:
- apiGroups:
  - ""
  resources:
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - pods
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumnetworkpolicies/status
  - ciliumnetworkpolicies/finalizers
  - ciliumclusterwidenetworkpolicies
  - ciliumclusterwidenetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/finalizers
  - ciliumendpoints
  - ciliumendpoints/status
  - ciliumendpoints/finalizers
  - ciliumnodes
  - ciliumnodes/status
  - ciliumnodes/finalizers
  - ciliumidentities
  - ciliumidentities/status
  - ciliumidentities/finalizers
  - ciliumlocalredirectpolicies
  - ciliumlocalredirectpolicies/status
  - ciliumlocalredirectpolicies/finalizers
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - update
  - watch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/hubble-ui-clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
rules:
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - componentstatuses
      - endpoints
      - namespaces
      - nodes
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - "*"
    verbs:
      - get
      - list
      - watch
---
# Source: cilium/templates/cilium-agent-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  namespace: kube-system
  name: "hubble-ui"
---
# Source: cilium/templates/hubble-relay-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
spec:
  type: ClusterIP
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  labels:
    k8s-app: hubble-ui
  namespace: kube-system
spec:
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
  type: ClusterIP
---
# Source: cilium/templates/cilium-agent-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: cilium
  name: cilium
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # This annotation plus the CriticalAddonsOnly toleration makes
        # cilium to be a critical pod in the cluster, which ensures cilium
        # gets priority scheduling.
        # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        k8s-app: cilium
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
            - matchExpressions:
              - key: beta.kubernetes.io/os
                operator: In
                values:
                - linux
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - cilium
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        command:
        - cilium-agent
        startupProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9876
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9876
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9876
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 3
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
        image: "quay.io/cilium/cilium:v1.10.4@sha256:7d354052ccf2a7445101d78cebd14444c7c40129ce7889f2f04b89374dbf8a1d"
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - "/cni-install.sh"
              - "--enable-debug=false"
              - "--cni-exclusive=true"
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        name: cilium-agent
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /host/opt/cni/bin
          name: cni-path
        - mountPath: /host/etc/cni/net.d
          name: etc-cni-netd
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
          # Needed to be able to load kernel modules
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
        - mountPath: /var/lib/cilium/tls/hubble
          name: hubble-tls
          readOnly: true
      hostNetwork: true
      initContainers:
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        env:
          - name: CGROUP_ROOT
            value: /run/cilium/cgroupv2
          - name: BIN_PATH
            value: /opt/cni/bin
        command:
          - sh
          - -c
          # The statically linked Go program binary is invoked to avoid any
          # dependency on utilities like sh and mount that can be missing on certain
          # distros installed on the underlying host. Copy the binary to the
          # same directory where we install cilium cni plugin so that exec permissions
          # are available.
          - 'cp /usr/bin/cilium-mount /hostbin/cilium-mount && nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT; rm /hostbin/cilium-mount'
        image: "quay.io/cilium/cilium:v1.10.4@sha256:7d354052ccf2a7445101d78cebd14444c7c40129ce7889f2f04b89374dbf8a1d"
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - mountPath: /hostproc
            name: hostproc
          - mountPath: /hostbin
            name: cni-path
        securityContext:
          privileged: true
      - command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-state
              name: cilium-config
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-bpf-state
              name: cilium-config
              optional: true
        image: "quay.io/cilium/cilium:v1.10.4@sha256:7d354052ccf2a7445101d78cebd14444c7c40129ce7889f2f04b89374dbf8a1d"
        imagePullPolicy: IfNotPresent
        name: clean-cilium-state
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - mountPath: /run/cilium/cgroupv2
          name: cilium-cgroup
          mountPropagation: HostToContainer
        - mountPath: /var/run/cilium
          name: cilium-run
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      terminationGracePeriodSeconds: 1
      tolerations:
      - operator: Exists
      volumes:
        # To keep state between restarts / upgrades
      - hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        name: cilium-run
        # To keep state between restarts / upgrades for bpf maps
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
      # To mount cgroup2 filesystem on the host
      - hostPath:
          path: /proc
          type: Directory
        name: hostproc
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
        name: cilium-cgroup
      # To install cilium cni plugin in the host
      - hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        name: cni-path
        # To install cilium cni configuration in the host
      - hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        name: etc-cni-netd
        # To be able to load kernel modules
      - hostPath:
          path: /lib/modules
        name: lib-modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-clustermesh
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
      - name: hubble-tls
        projected:
          sources:
          - secret:
              name: hubble-server-certs
              items:
                - key: ca.crt
                  path: client-ca.crt
                - key: tls.crt
                  path: server.crt
                - key: tls.key
                  path: server.key
              optional: true
---
# Source: cilium/templates/cilium-operator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.cilium/app: operator
    name: cilium-operator
  name: cilium-operator
  namespace: kube-system
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
    spec:
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: io.cilium/app
                operator: In
                values:
                - operator
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        command:
        - cilium-operator-generic
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        image: "quay.io/cilium/operator-generic:v1.10.4@sha256:c49a14e34634ff1a494c84b718641f27267fb3a0291ce3d74352b44f8a8d2f93"
        imagePullPolicy: IfNotPresent
        name: cilium-operator
        livenessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        volumeMounts:
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      tolerations:
      - operator: Exists
      volumes:
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
---
# Source: cilium/templates/hubble-relay-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  labels:
    k8s-app: hubble-relay
  namespace: kube-system
spec:

  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "k8s-app"
                  operator: In
                  values:
                    - cilium
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: hubble-relay
          image: "quay.io/cilium/hubble-relay:v1.10.4@sha256:be17169d2b68a974e9e27bc194e0c899dbec8caee9dd95011654b75d775d413d"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - mountPath: /var/run/cilium
            name: hubble-sock-dir
            readOnly: true
          - mountPath: /etc/hubble-relay
            name: config
            readOnly: true
          - mountPath: /var/lib/hubble-relay/tls
            name: tls
            readOnly: true
      restartPolicy: Always
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 0
      volumes:
      - configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
        name: config
      - hostPath:
          path: /var/run/cilium
          type: Directory
        name: hubble-sock-dir
      - projected:
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: ca.crt
                  path: hubble-server-ca.crt
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
        name: tls
---
# Source: cilium/templates/hubble-ui-deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
  name: hubble-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
    spec:
      securityContext:
        runAsUser: 1001
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      containers:
        - name: frontend
          image: "quay.io/cilium/hubble-ui:v0.7.9@sha256:e0e461c680ccd083ac24fe4f9e19e675422485f04d8720635ec41f2ba9e5562c"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          resources:
            {}
        - name: backend
          image: "quay.io/cilium/hubble-ui-backend:v0.7.9@sha256:632c938ef6ff30e3a080c59b734afb1fb7493689275443faa1435f7141aabe76"
          imagePullPolicy: IfNotPresent
          env:
            - name: EVENTS_SERVER_PORT
              value: "8090"
            - name: FLOWS_API_ADDR
              value: "hubble-relay:80"
          ports:
            - containerPort: 8090
              name: grpc
          resources:
            {}
        - name: proxy
          image: "docker.io/envoyproxy/envoy:v1.18.2@sha256:e8b37c1d75787dd1e712ff389b0d37337dc8a174a63bed9c34ba73359dc67da7"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081
              name: http
          resources:
            {}
          command: ["envoy"]
          args:
            [
              "-c",
              "/etc/envoy.yaml",
              "-l",
              "info"
            ]
          volumeMounts:
            - name: hubble-ui-envoy-yaml
              mountPath: /etc/envoy.yaml
              subPath: envoy.yaml
      volumes:
        - name: hubble-ui-envoy-yaml
          configMap:
            name: hubble-ui-envoy
